{"version":3,"sources":["../node_modules/process/browser.js","../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/core/RepoInfo.ts","../../src/realtime/Constants.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/api/Query.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/api/DataSnapshot.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/core/util/ServerValues.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/operation/Operation.ts","../../src/core/util/ImmutableTree.ts","../../src/core/SyncPoint.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/view/View.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/SyncTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/core/Repo.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/api/Reference.ts","../../src/core/util/Tree.ts","../../src/core/Repo_transaction.ts","../../src/core/AuthTokenProvider.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","toString","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","DOMStorageWrapper","MemoryStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","varArgs","arg","isArray","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","sort","splitStringBySize","segsize","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","stack","setTimeoutNonBlocking","time","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","ValidationPath","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","node","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","Index","KEY_INDEX","KeyIndex","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","root","base12","buildPennant","chunkSize","low","high","childTree","buildBalancedTree","namedNode","middle","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","newIndexes","addToIndexes","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Object","defineProperties","MAX","setPriorityMaxNode","json","childData","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","VALUE_INDEX","valueNode","indexPath_","extractChild","snap","aChild","bChild","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","DataSnapshot","forEach","childrenNode","hasChildren","getKey","getRef","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","DataEvent","snapshotNode","eventData","ctx","createCancelEvent","CancelEvent","matches","ValueEventRegistration","hasAnyCallback","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","PathIndex","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","Query","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","validateContextObject","valueCallback","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","children","Map","find","size","childKey","has","remember","clear","SparseSnapshotTree","forget","tree","delete","forEachTree","prefixPath","func","emptyChildrenSingleton","fromUser","fromServer","queryId","tagged","User","OperationSource","Server","forServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","AckUserWrite","Empty","fromObject","ImmutableTree","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","ViewCache","CacheNode","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","oldSnap","valueChange","Change","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","viewCache","changes","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","ViewProcessor","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","WriteTreeCompleteChildSource","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","initialViewCache","eventRegistrations_","indexFilter","IndexedFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","generateEventsForChanges_","getInitialEvents","initialChanges","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","View","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","SyncPoint","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","writeTree_","addWrite","CompoundWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","WriteTree","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","SyncTree","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","rootNode_","updateSnapshot","newSnapshotNode","counters_","incrementCounter","amount","deepCopy","getCollection","hashString","collections_","StatsCollection","getOrCreateReporter","creatorFunction","reporters_","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","isMobileCordova","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","StatsManager","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","href","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","options","headers","platform","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","forceRefresh","getToken","then","accessToken","Connection","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","clientName","isReactNative","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","forceRestClient","app","authTokenProvider","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","persistentConnection_","search","authOverride","appId","addTokenChangeListener","statsReporter_","StatsReporter","transactionsInit_","infoData_","SnapshotHolder","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","resolvedOnDisconnectTree","resolved","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","changeAccumulator","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","QueryParams","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","LimitedFilter","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Repo","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","TransactionResult","startTransaction","setPriority","thennablePushRef","pushRef","Promise","OnDisconnect","TransactionStatus","childCount","name_","parent_","TreeNode","subTree","pathObj","Tree","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","app_","authProvider_","auth_","getImmediate","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","repos_","useRestClient_","RepoManager","appName","dbUrl","databaseFromApp","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","FirebaseAuthTokenProvider","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","registerDatabase","instance","setSDKVersion","registerComponent","Component","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","firebase"],"mappings":"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","file":"static/js/5.97e49efa.chunk.js","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function (queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ) {\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function () {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function (\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function (\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function (\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function (\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function (\n  changedPath: Path\n): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function (\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function (\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function (\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function (\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function (path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet, CONSTANTS } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"sourceRoot":""}